### 1. 람다식에 대한 설명으로 틀린것은? 4

1) 람다식은 함수형 인터페이스의 익명 구현 객체를 생성한다.

2) 매개 변수가 없을 경우 ( ) → { … } 형태로 작성한다.

3) (x, y) → { return x + y; }는 (x, y) → x + y;로 바꿀 수 있다.

4) @FunctionalInterface가 기술된 인터페이스만 람다식으로 표현이 가능하다.


### 2. 메소드 참조에 대한 설명으로 틀린 것은? 4

1) 메소드 참조는 함수적 인터페이스의 익명 구현 객체를 생성한다.

2) 인스턴스 메소드는 “참조변수::메소드”로 기술한다.

3) 정적 메소드는 “클래스::메소드”로 기술한다.

4) 생성자 참조인 “클래스::new”는 매개 변수가 없는 디폴트 생성자만 호출한다

### 3. 잘못 작성한 람다식은? 2

1)  a → a + 3

2) a, b → a * b

3) x → System.out.println(x/5)

4) (x, y) → Math.max(x, y)

4. 다음 코드는 컴파일 에러가 발생합니다. 그 이유는? 중괄호 블럭에서의 x*10 (x 선언하지않음)
public class LambdaExample {
    public static int method(int x, int y) {
    //익명함수는 final로 취급한다. 값을 변경할 수 없음
        IntSupplier supplier = () -> {
            x *= 10;
            int result = x + y;
            return result;
        };
        int result = supplier.getAsInt();
        return result;
    }

    public static void main(String[] args) {
        System.out.println(method(3, 5));
    }
}